<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>详解AQS</title>
    <url>/2020/07/09/%E8%AF%A6%E8%A7%A3AQS/</url>
    <content><![CDATA[<h1 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是AQS</h1><p>我们常用的j.u.c包里，提供了许多强大的同步工具，例如ReentrantLock，Semphore，ReentrantReadWriteLock等，但当这些工具难以满足某个场景的需求时，我们就需要定制化我们自己的同步器，这时，我们可能会想，如果能有一个像Servlet这种只要重写某几个方法就能完成一把定制锁的实现的就好了！！ 没错，AQS就是提供了这样一种功能，它如果要实现一个同步器的大部分通用功能都帮我们实现好了，然后提供出抽象函数供我们重写来定制化自己想要的同步器。 实际上，上面所说的ReentrantLock，Semphore，ReentrantReadWriteLock等juc包中同步工具的实现，也都是在AQS的辅助下进行的“二次开发”。  例如在ReentrantLock继承了Lock接口，然后利用定制化了的继承了AQS的类，来去实现Lock接口。</p>
<a id="more"></a>

<hr>
<h1 id="AQS提供了什么功能"><a href="#AQS提供了什么功能" class="headerlink" title="AQS提供了什么功能"></a>AQS提供了什么功能</h1><p>同步器一般会包括两种方法，一种是acquire方法， 另一种是release方法； acquire方法是尝试获取锁操作，如果获取不到就阻塞(park)当前线程，并将其放入等待队列中；release方法是释放锁操作，然后会从等待队列中出队一个或多个被acquire阻塞的线程并将其唤醒(unpark). </p>
<p>j.u.c包中并没有对同步器的API做一个统一的定义。因此，有一些类定义了通用的接口（如Lock），而另外一些则定义了其专有的版本。因此在不同的类中，acquire和release操作的名字和形式会各有不同。例如：Lock.lock，Semaphore.acquire，CountDownLatch.await和FutureTask.get，在这个框架里，这些方法都是acquire操作。但是，J.U.C为支持一系列常见的使用选项，在类间都有个一致约定。在有意义的情况下，每一个同步器都支持下面的操作：</p>
<ul>
<li>阻塞(例如：acquire)和非阻塞（例如：tryAcquire）同步。</li>
<li>可选的超时设置，让调用者可以放弃等待</li>
<li>通过中断实现的任务取消，通常是分为两个版本，一个acquire可取消，而另一个不可以（例如ReentrantLock中的<code>lockInterruptibly()</code>就是可在阻塞等待中被中断的，而<code>lock()</code>是阻塞等待中不可被中断的）。</li>
</ul>
<hr>
<h1 id="读源码之前需要知道的知识"><a href="#读源码之前需要知道的知识" class="headerlink" title="读源码之前需要知道的知识"></a>读源码之前需要知道的知识</h1><h2 id="AQS的内部队列"><a href="#AQS的内部队列" class="headerlink" title="AQS的内部队列"></a>AQS的内部队列</h2><p>在AQS中，被阻塞的线程会被打包成一个Node然后放到等待队列中，head指向队列头结点，tail指向尾结点，队列不存在时（未初始化时）的样子为：<code>head==tail==null</code> ，初始化之后，队列为空的情况为：<code>head==tail==dummy头结点</code>，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200407163818175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjE2Mjk2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>head指向dummy头结点，这个头结点存在的意义是为了方便队列操作，并且里面保存的thread恒为null。下面来看一下node每个字段的意思</p>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>为了抓住重点学习，这里只介绍Node里的重要成员：</p>
<ul>
<li>thread ：当前结点里保存的线程</li>
<li>prev，next：当前结点的前后指针，这里队列的实现是<strong>带有头结点的双向链表</strong>。 prev是靠近头结点那一端的，next是靠近尾结点那一端的。</li>
<li>waitStatus：初始状态为0。为-1时，表示存在正在阻塞等待的线程，结点入队之后，会自旋一次来再次尝试tryAcquire，如果依然失败，才会进入阻塞，自旋的这一次就是把waitStatus字段CAS成-1。 这一字段取值范围如下：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** waitStatus value to indicate thread has cancelled */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前结点为-1, 则说明后一个结点需要park阻塞</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** waitStatus value to indicate thread is waiting on condition */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * waitStatus value to indicate the next acquireShared should</span></span><br><span class="line"><span class="comment"> * unconditionally propagate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h1 id="AQS源码解读"><a href="#AQS源码解读" class="headerlink" title="AQS源码解读"></a>AQS源码解读</h1><p>这里先更新一下独占式的部分。。共享式的日后再看.</p>
<h2 id="独占式代码部分"><a href="#独占式代码部分" class="headerlink" title="独占式代码部分"></a>独占式代码部分</h2><p>先有个宏观上的理解，如下图：<br><img src="https://img-blog.csdnimg.cn/20200407154554112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjE2Mjk2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其中tryRelease，tryAcquire是非阻塞式获取锁。 有了宏观上的框架，再去看一下实现的细节。</p>
<h3 id="acquire"><a href="#acquire" class="headerlink" title="acquire"></a>acquire</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">	        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">	        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里使用了<code>短路原理</code>, 如果<code>tryAcquire</code>成功的话，就直接跳出if了； 如果 <code>tryAcquire</code>失败，那么会先执行<code>addWaiter</code>把当前线程打包成一个node放入等待队列， 然后再执行<code>acquireQueued</code>尝试一次自旋，如果依然无法获取到锁，就进入阻塞。</p>
<h3 id="addWaiter"><a href="#addWaiter" class="headerlink" title="addWaiter"></a>addWaiter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">     Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">     <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">     Node pred = tail;</span><br><span class="line">     <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">         node.prev = pred;</span><br><span class="line">         <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">             pred.next = node;</span><br><span class="line">             <span class="keyword">return</span> node;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     enq(node);</span><br><span class="line">     <span class="keyword">return</span> node;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>将当前线程打包成一个node， 然后将这个node入队，如果入队失败则有2种情况：</p>
<ul>
<li>队列还不存在（队列还没初始化）</li>
<li>在入队时，出现了同步问题。（这里的队列也是临界资源，如果CAS失败说明资源竞争失败）<br>当入队失败时，进入<code>enq</code>函数，这一函数的作用是：初始化队列并自旋入队操作。</li>
</ul>
<h3 id="enq"><a href="#enq" class="headerlink" title="enq"></a>enq</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Node t = tail;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.prev = t;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果队列未初始化，那么就初始化队列，如果已经初始化了，就将当前结点自旋入队，该方法一定返回true.</p>
<p><strong>线程被打包成结点，然后入队之后，会进入acquireQueued进行一次自旋try，如果依然失败就阻塞</strong></p>
<h3 id="acquireQueued"><a href="#acquireQueued" class="headerlink" title="acquireQueued"></a>acquireQueued</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    booleanfailed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="comment">// （*）</span></span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先判断前驱结点是不是head，因为head指向的是dummy结点，因此，如果前驱结点就是head了，那么当前结点就是队首了！！ 然后只有队首的结点才有资格在第一次自旋的时候进行<code>tryAcquire</code> </p>
<p><strong>每一个结点不会改变自己的waitStatus, 只会改变在队列中前驱结点的waitStatus</strong> ， 因此，如果前驱结点是0，则通过CAS操作将其变为-1，然后自旋一次，如果前驱结点是-1，则说明已经自旋过一次了，然后才能进入 <code>parkAndCheckInterrupt</code>函数，也就是将当前结点的线程阻塞。</p>
<p>这个函数里的几个细节，如果队首元素成功tryAcquire，则需要进行出队操作，把当前结点设置成dummy结点就可以了。<br>在setHead的时候。 <strong>会将thread设置成null 也是用于help gc</strong> 。 同时也要手动让前驱结点的next设置为null， 方便gc回收..</p>
<p><strong>到此位置，线程就会被卡在<code>parkAndCheckInterrupt</code>这个函数中，等待被唤醒</strong></p>
<h3 id="release"><a href="#release" class="headerlink" title="release"></a>release</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>release的实现就更短了，如果tryRelease成功的话，就看是否还存在阻塞等待的线程，<code>if (h != null &amp;&amp; h.waitStatus != 0)</code> 这句话的判断就是判断否还存在阻塞等待的线程。 如果h是null的话，则说明队列根本就不存在，更别说等待的线程了，如果h.waitStatus不是0的话，则说明队列里存在等待的线程node。</p>
<p>如果存在正在等待的线程的话，就<code>unparkSuccessor</code> , 即唤醒这个正在等待的队首线程. </p>
<h3 id="unparkSuccessor"><a href="#unparkSuccessor" class="headerlink" title="unparkSuccessor"></a>unparkSuccessor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If status is negative (i.e., possibly needing signal) try</span></span><br><span class="line"><span class="comment">     * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class="line"><span class="comment">     * fails or if status is changed by waiting thread.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Thread to unpark is held in successor, which is normally</span></span><br><span class="line"><span class="comment">     * just the next node.  But if cancelled or apparently null,</span></span><br><span class="line"><span class="comment">     * traverse backwards from tail to find the actual</span></span><br><span class="line"><span class="comment">     * non-cancelled successor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node s = node.next;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                s = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，s是下一个需要被唤醒的node结点，然后后面会对其进行unpark（唤醒）操作。</p>
<h1 id="AQS的使用"><a href="#AQS的使用" class="headerlink" title="AQS的使用"></a>AQS的使用</h1><p>到目前位置，只是简单过完了一遍AQS的独占式的acquire和release操作， 它帮我们完成了一部分同步状态管理事情，但是最关键的<code>tryAcquire</code>和<code>tryRelease</code> 其实它是一个需要我们去重写的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="需要做的事情"><a href="#需要做的事情" class="headerlink" title="需要做的事情"></a>需要做的事情</h2><p>在使用AQS的时候，往往需要我们自己去重写：</p>
<ul>
<li>tryAcquire</li>
<li>tryRelease</li>
<li>tryAcquireShared</li>
<li>tryReleaseShared</li>
<li>isHeldExclusively：如果对于当前（正调用的）线程，同步是以独占方式进行的，则返回 true。此方法只是 abstractqueuedsynchronizer.conditionobject 方法内进行内部调用，因此，如果不使用条件，则不需要定义它。</li>
</ul>
<p>在实现tryAcquire的时候，我们需要对内部的status进行操作，AQS也提供给了我们关于Status操作接口，分别是：</p>
<ul>
<li>getState()</li>
<li>setState(int)</li>
<li>compareAndSetState(int, int)</li>
</ul>
<p>源码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">state = newState;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line"><span class="comment">// See below for intrinsics setup to support this</span></span><br><span class="line"><span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>AQS在使用的时候，往往是使用一个内部类继承AQS，然后重写上述提到的方法，然后就可以在当前类中使用这个内部类的acquire / release来实现同步了</strong></p>
<h2 id="使用AQS完成信号量的功能"><a href="#使用AQS完成信号量的功能" class="headerlink" title="使用AQS完成信号量的功能"></a>使用AQS完成信号量的功能</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mutex</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 自定义同步器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否锁定状态</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试获取资源，立即返回。成功则返回true，否则false。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> acquires == <span class="number">1</span>; <span class="comment">// 这里限定只能为1个量</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;<span class="comment">//state为0才设置为1，不可重入！</span></span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());<span class="comment">//设置为当前线程独占资源</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试释放资源，立即返回。成功则为true，否则false。</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> releases == <span class="number">1</span>; <span class="comment">// 限定为1个量</span></span><br><span class="line">            <span class="keyword">if</span> (getState() == <span class="number">0</span>)<span class="comment">//既然来释放，那肯定就是已占有状态了。只是为了保险，多层判断！</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>);<span class="comment">//释放资源，放弃占有状态</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 真正同步类的实现都依赖继承于AQS的自定义同步器！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//lock&lt;--&gt;acquire。两者语义一样：获取资源，即便等待，直到成功才返回。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//tryLock&lt;--&gt;tryAcquire。两者语义一样：尝试获取资源，要求立即返回。成功则为true，失败则为false。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//unlock&lt;--&gt;release。两者语文一样：释放资源。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//锁是否占有状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>了解了AQS的原理之后，可以来趁热打铁的看一下ReentrantLock的加锁实现</p>
<h1 id="ReentrantLock的原理"><a href="#ReentrantLock的原理" class="headerlink" title="ReentrantLock的原理"></a>ReentrantLock的原理</h1><p>这里主要详细介绍一下ReentrantLock对AQS的两种实现方式：</p>
<ul>
<li>公平锁（FairSync）</li>
<li>非公平锁（NonfairSync）<br><img src="https://img-blog.csdnimg.cn/20200407212955709.png" alt="在这里插入图片描述"><br>其中Sync是公平锁和非公平锁的抽象基类，里面已经初步实现了一些方法，但其中的<code>lock()</code>方法和<code>tryAcquire()</code>方法依然是抽象的，需要子类去进行实现，而公平锁和非公平锁的主要区别也主要在这两个函数中，下面来看一下。</li>
</ul>
<h2 id="公平锁与非公平锁的实现区别"><a href="#公平锁与非公平锁的实现区别" class="headerlink" title="公平锁与非公平锁的实现区别"></a>公平锁与非公平锁的实现区别</h2><h3 id="lock操作"><a href="#lock操作" class="headerlink" title="lock操作:"></a>lock操作:</h3><h4 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">	      setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	    acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，非公平锁在lock的时候会进行一次CAS操作，如果直接获取到锁了的话，那么就直接继续执行。 在临界区的执行速度比较快的情况下，非公平锁会比公平锁要更快，因为在唤醒阻塞线程的过程中，有可能有其他线程已经取得锁然后执行完并释放了。。 </p>
<h3 id="tryAcquire操作："><a href="#tryAcquire操作：" class="headerlink" title="tryAcquire操作："></a>tryAcquire操作：</h3><h4 id="非公平锁："><a href="#非公平锁：" class="headerlink" title="非公平锁："></a>非公平锁：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="comment">// 这里直接进行CAS ， 尝试拿锁</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="comment">// 重入时，给state加一个acquires偏移量，对应release时会减去一次</span></span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="公平锁-1"><a href="#公平锁-1" class="headerlink" title="公平锁"></a>公平锁</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">    	<span class="comment">// 这里会先判断是否存在比当前线程等待更久的线程！</span></span><br><span class="line">    	<span class="comment">// 只有不存在等待的线程的时候，才有资格去尝试获取锁资源（CAS）</span></span><br><span class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">            compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="comment">// 重入时，给state加一个acquires偏移量，对应release时会减去一次</span></span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，在tryAcquire时，公平锁会先判断是否存在比当前线程等待的更久的线程，如果不存在这样的线程，才能进行CAS尝试获取锁； 而非公平锁是直接进行CAS获取锁。</p>
<h2 id="关于Interrupt"><a href="#关于Interrupt" class="headerlink" title="关于Interrupt"></a>关于Interrupt</h2><p>我们知道， thread1.interrupt()就是将thread1的中断标志位置为1（Thread.interrupted()是检测并清除中断标志，thread1.isInterrupted()是仅仅检测thread1的中断标志但不清除）.</p>
<p><code>ReentrantLock()</code> 的<code>lock()</code>方法，thread因等待资源而被阻塞在等待队列中的时候，不会被打断，而是先将这个中断标记位记下来，然后当获取到锁资源之后，执行<code>selfInterrupt()</code>, 也就是在获得锁资源后打断自己！！  如果希望在阻塞队列中依然可以被打断的话，应该使用<code>lockInterruptibly</code> , 这个lock操作是可以允许线程在阻塞等待时被中断的！</p>
<p>到此为止，我们看到了在ReentrantLock中对tryAcquire和tryRelease的实现，分别实现了公平竞争和非公平竞争的场景，因为这里的ReentrantLock是独占式的锁（也就是说资源只允许被一个线程获取，也可以理解成01信号量），所以并没有实现 <code>tryAcquireShared</code>和<code>tryReleaseShared</code> 这两个方法。 实际上，我们在使用的时候也是，需要哪种模式就实现对应模式的acquire和release.  </p>
<p>对于 <code>tryAcquireShared</code>和<code>tryReleaseShared</code> 这两个方法的实现例子，可以去看看Semphore的源码，它就是只重写了<code>tryAcquireShared</code>和<code>tryReleaseShared</code>，理解完上面分析的代码之后，去看Semphore的源码也不会很困难了。。日后有时间再写<code>Semphore</code>的源码记录把。。</p>
]]></content>
      <categories>
        <category>Java并发</category>
      </categories>
      <tags>
        <tag>AQS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java并发基础总结</title>
    <url>/2020/07/09/Java%E5%B9%B6%E5%8F%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h1><p>java内存模型(Java Memory Model，JMM)是java虚拟机规范定义的，<strong>用来屏蔽掉java程序在各种不同的硬件和操作系统对内存的访问的差异</strong>，这样就可以实现java程序在各种不同的平台上都能达到内存访问的一致性。为了实现了JVM的跨平台性，在向上提供了一系列的指令的同时，也提供了一些编程规则需要理解和遵守，比如Happens-Before原则，as-if-serial原则，主内存工作内存的概念等等。  </p>
<a id="more"></a>
<p>编译器，处理器进行不同层次上的指令重排会对多线程编程造成一定的影响，对于一些不应该进行指令重排的场景下，Java编译器通过在适当的位置插入内存屏障指令来禁止特定类型的处理器重排序，JMM把内存屏障指令分为如下四类：<br><img src="https://img-blog.csdnimg.cn/20200401210939258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjE2Mjk2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从JDK5开始，Java使用新的JSR-133内存模型，其主要作用就是提供了happens-before原则，屏蔽掉了底层解决内存可见行问题的实现，编程者只要记住happens-before原则，并在理解这一原则下进行编程，happens-before原则为：</p>
<ul>
<li>程序顺序原则：一个线程中的每个操作，都happens-before于该线程中的任意后续操作；</li>
<li>监视器锁规则：对一个锁的解锁，一定happens-before于随后对这个锁的读</li>
<li>volatile变量规则：对一个volatile域的<strong>写</strong>，happens-before于任意后续对这个volatile域的<strong>读</strong>.</li>
<li>传递性：A happens-before B， B happens-before C, 那么 A happens-before C.</li>
</ul>
<h2 id="Happens-Before"><a href="#Happens-Before" class="headerlink" title="Happens-Before"></a><font color=brown>Happens-Before</font></h2><h3 id="1-程序次序规则："><a href="#1-程序次序规则：" class="headerlink" title="1. 程序次序规则："></a>1. 程序次序规则：</h3><p>在一个线程内一段代码的执行结果是有序的。就是还会指令重排，但是随便它怎么排，结果是按照我们代码的顺序生成的不会变！</p>
<h3 id="2-管程锁定规则："><a href="#2-管程锁定规则：" class="headerlink" title="2. 管程锁定规则："></a>2. 管程锁定规则：</h3><p>就是无论是在单线程环境还是多线程环境，对于同一个锁来说，一个线程对这个锁解锁之后，另一个线程获取了这个锁都能看到前一个线程的操作结果！(管程是一种通用的同步原语，synchronized就是管程的实现）</p>
<h3 id="3-volatile变量规则："><a href="#3-volatile变量规则：" class="headerlink" title="3. volatile变量规则："></a>3. volatile变量规则：</h3><p>就是如果一个线程先去写一个volatile变量，然后一个线程去读这个变量，那么这个写操作的结果一定对读的这个线程可见。</p>
<h3 id="4-线程启动规则："><a href="#4-线程启动规则：" class="headerlink" title="4. 线程启动规则："></a>4. 线程启动规则：</h3><p>在主线程A执行过程中，启动子线程B，那么线程A在启动子线程B之前对共享变量的修改结果对线程B可见。</p>
<h3 id="5-线程终止规则："><a href="#5-线程终止规则：" class="headerlink" title="5. 线程终止规则："></a>5. 线程终止规则：</h3><p>在主线程A执行过程中，子线程B终止，那么线程B在终止之前对共享变量的修改结果在线程A中可见。</p>
<h3 id="6-线程中断规则："><a href="#6-线程中断规则：" class="headerlink" title="6. 线程中断规则："></a>6. 线程中断规则：</h3><p>对线程interrupt()方法的调用先行发生于被中断线程代码检测到中断事件的发生，可以通过Thread.interrupted()检测到是否发生中断。</p>
<h3 id="7-传递规则："><a href="#7-传递规则：" class="headerlink" title="7. 传递规则："></a>7. 传递规则：</h3><p>这个简单的，就是happens-before原则具有传递性，即A happens-before B ， B happens-before C，那么A happens-before C。</p>
<h3 id="8-对象终结规则："><a href="#8-对象终结规则：" class="headerlink" title="8. 对象终结规则："></a>8. 对象终结规则：</h3><p>这个也简单的，就是一个对象的初始化的完成，也就是构造函数执行的结束一定 happens-before它的finalize()方法。</p>
<h2 id="as-if-serial"><a href="#as-if-serial" class="headerlink" title="as-if-serial"></a><font color=brown>as-if-serial</font></h2><p>as-if-serial语义的意思是：<strong>不管怎么重排序（编译器和处理器为了提高并行度），（单线程）程序的执行结果不能被改变</strong>。但依然会对毫无关联的两个语句进行指令重排，比如 int a=1; int b = 2; 它们的先后顺序可能会不一样.</p>
<h2 id="主内存和工作内存"><a href="#主内存和工作内存" class="headerlink" title=" 主内存和工作内存"></a><font color=brown> 主内存和工作内存</font></h2><p>JMM定义的内存变量的访问规则（这里的变量是指线程共享的变量），有了主内存和工作内存的概念。 Java虚拟机规定所有变量（非线程私有的变量）都存在主内存中，而线程私有的局部变量存在线程独有的工作内存中，这两个概念比较类似Java内存规范中的堆（主内存）和虚拟机栈（工作内存），只是比较类似！</p>
<p>而<font color=red><strong>解决主内存的中的变量和工作内存中的变量的同步的方式</strong></font>就是用volatile关键字。</p>
<h1 id="Volatile关键字"><a href="#Volatile关键字" class="headerlink" title="Volatile关键字"></a>Volatile关键字</h1><ul>
<li><h2 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h2><ul>
<li>保证了“共享变量”在多线程环境下的“可见性”.</li>
</ul>
</li>
<li><h2 id="底层实现原则："><a href="#底层实现原则：" class="headerlink" title="底层实现原则："></a>底层实现原则：</h2><ul>
<li>对被volatile修饰的变量进行写操作的时候，JVM会向处理器发送一条#Lock前缀指令，这个指令的作用就是将对应缓存行的数据写回到被缓存的内存。</li>
<li>一个处理器将缓存回写到内存<code>&lt;addr&gt;</code>中，那么其他处理器中对<code>&lt;addr&gt;</code>内存地址的缓存都会被标记成’失效’。（缓存一致性协议MESI：由嗅探技术实现，每个缓存行会有一个标示位，分别代表 ：M(被修改)，E(独占的), S(共享的), I(无效的), 若读取的缓存行是无效，那么会重新从内存读取）</li>
</ul>
</li>
</ul>
<h1 id="Synchronized关键字"><a href="#Synchronized关键字" class="headerlink" title="Synchronized关键字"></a>Synchronized关键字</h1><h2 id="1-作用："><a href="#1-作用：" class="headerlink" title="1. 作用："></a>1. 作用：</h2><p>对于 Synchronized 关键字而言，每一个Java对象都可以作为锁，具体表现为：</p>
<ul>
<li>普通<code>Synchronized</code>方法，锁是当前对象</li>
<li>静态<code>Synchronized</code>方法，锁是当前类的Class对象</li>
<li>对于<code>Synchronized</code>方法块，锁是括号里配置的对象</li>
</ul>
<h2 id="2-对象头："><a href="#2-对象头：" class="headerlink" title="2. 对象头："></a>2. 对象头：</h2><ul>
<li>普通对象的对象头占2个字，分别为：<ul>
<li>Mark Word：存储了对象的HashCode和锁信息</li>
<li>Class Metadata Address：存储对象类型的数据指针</li>
</ul>
</li>
<li>数组类对象的对象头占3个字，除了上面两个还有一个：<ul>
<li>Array Length: 数组的长度</li>
</ul>
</li>
</ul>
<h3 id="Mark-Word："><a href="#Mark-Word：" class="headerlink" title="Mark Word："></a>Mark Word：</h3><p><img src="https://img-blog.csdnimg.cn/20200401195923419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjE2Mjk2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200401200123515.png" alt="在这里插入图片描述"></p>
<h2 id="3-锁的升级和对比"><a href="#3-锁的升级和对比" class="headerlink" title="3. 锁的升级和对比:"></a>3. 锁的升级和对比:</h2><p><a href="https://www.cnblogs.com/pomer-huang/p/10965228.html" target="_blank" rel="noopener">https://www.cnblogs.com/pomer-huang/p/10965228.html</a><br><img src="https://img-blog.csdnimg.cn/20200401200452817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjE2Mjk2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在讲重量级锁的调用的时候，可以说一下Java对管程的实现，即每一个对象都可以被视作一个MonitorObject，且维护着一个WaitSet，EntrySet，具体可以看 <a href="https://www.cnblogs.com/minikobe/p/12123065.html" target="_blank" rel="noopener">这个</a> 。<br><img src="https://img-blog.csdnimg.cn/20200613143648450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjE2Mjk2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="4-原子操作的实现："><a href="#4-原子操作的实现：" class="headerlink" title="4. 原子操作的实现："></a>4. 原子操作的实现：</h2><ul>
<li><h3 id="处理器实现院子操作："><a href="#处理器实现院子操作：" class="headerlink" title="处理器实现院子操作："></a>处理器实现院子操作：</h3><ul>
<li><h4 id="1-总线锁："><a href="#1-总线锁：" class="headerlink" title="1.总线锁："></a>1.总线锁：</h4><ul>
<li>处理器提供一个LOCK #信号，当一个处理器在总线上输出此信号时，其他处理器的请求将会被阻塞，此时处理器可以独享内存。缺点是，内存的不同地址之间其实不存在同步关系，这样会使得效率很低.</li>
</ul>
</li>
<li><h4 id="2-缓存锁"><a href="#2-缓存锁" class="headerlink" title="2. 缓存锁"></a>2. 缓存锁</h4><ul>
<li>利用<a href="https://blog.csdn.net/martin_ke/article/details/88851393" target="_blank" rel="noopener">缓存一致性协议</a>（如MESI协议），和处理器提供的LOCK指令对指定内存上锁，完成了对共享资源操作的互斥。</li>
<li>需要注意的是以下两个情况不能使用缓存锁：<ol>
<li>数据无法写入到缓存中，或操作数据跨多个缓存行。</li>
<li>处理器不支持缓存锁，此时会使用总线锁.</li>
</ol>
</li>
</ul>
</li>
<li><h3 id="Java实现原子操作："><a href="#Java实现原子操作：" class="headerlink" title="Java实现原子操作："></a>Java实现原子操作：</h3><ul>
<li><h4 id="CAS操作-Compare-And-Swap"><a href="#CAS操作-Compare-And-Swap" class="headerlink" title="CAS操作 ( Compare And Swap )"></a>CAS操作 ( Compare And Swap )</h4>通过调用处理器提供的<code>CMPXCHG</code>指令信实现，CAS的作用是：相等则交换。</li>
</ul>
</li>
<li><h4 id="CAS遇到的三大问题和解决方法："><a href="#CAS遇到的三大问题和解决方法：" class="headerlink" title="CAS遇到的三大问题和解决方法："></a>CAS遇到的三大问题和解决方法：</h4><ul>
<li><p>ABA问题</p>
<ul>
<li>问题：CAS会先检查操作值是否发生变化，如果发生了A-&gt;B-&gt;A这种变化则发现不出来。</li>
<li>解决方法：通过增加版本号的方式来解决: 1A-&gt;2B-&gt;3A</li>
</ul>
<ul>
<li><p>循环时间开销大：</p>
<ul>
<li>问题：在循环尝试CAS时，会给CPU带来很大的执行开销。</li>
<li>解决方法：如果jvm能支持处理器提供的pause指令，那么效率会有一定的提升。pause指令可以延迟CPU的执行并且不会因此清空cpu的指令流水的预读取。</li>
</ul>
<ul>
<li>问题：只能保证一个共享变量执行原子操作：</li>
<li>解决方法：将多个共享变量打包成一个就行了。从JDK1.5开始，JDK提供了AtomicReference类来保证引用对象的原子性！</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="ReentrantLock与AQS"><a href="#ReentrantLock与AQS" class="headerlink" title="ReentrantLock与AQS"></a>ReentrantLock与AQS</h1><p><a href="详解AQS.md">详情</a></p>
<hr>
<h1 id="start和run的区别"><a href="#start和run的区别" class="headerlink" title="start和run的区别"></a>start和run的区别</h1><p><img src="https://img-blog.csdnimg.cn/20200612201742112.png" alt="在这里插入图片描述"></p>
<ul>
<li>start方法是创建一个新的子线程并启动（调用run方法）</li>
<li>run方法只是Thread的一个普通方法的调用</li>
</ul>
<h1 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h1><h2 id="1-新建-New-创建后尚未启动的线程的状态"><a href="#1-新建-New-创建后尚未启动的线程的状态" class="headerlink" title="1. 新建(New): 创建后尚未启动的线程的状态"></a>1. 新建(New): 创建后尚未启动的线程的状态</h2><h2 id="2-运行-Runnable-包含Running和Ready"><a href="#2-运行-Runnable-包含Running和Ready" class="headerlink" title="2. 运行(Runnable):包含Running和Ready"></a>2. 运行(Runnable):包含Running和Ready</h2><h2 id="3-无限期等待-Waiting-不会被分配CPU执行时间，需要被唤醒"><a href="#3-无限期等待-Waiting-不会被分配CPU执行时间，需要被唤醒" class="headerlink" title="3. 无限期等待(Waiting): 不会被分配CPU执行时间，需要被唤醒"></a>3. 无限期等待(Waiting): 不会被分配CPU执行时间，需要被唤醒</h2><ul>
<li>没有设置Timeout参数的Object.wait()方法</li>
<li>没有设置Timeout参数的Thread.join()方法</li>
<li>LockSupport.part()<h2 id="4-限期等待-timed-waiting-：在一定时间后会由系统自动唤醒"><a href="#4-限期等待-timed-waiting-：在一定时间后会由系统自动唤醒" class="headerlink" title="4. 限期等待(timed waiting)：在一定时间后会由系统自动唤醒"></a>4. 限期等待(timed waiting)：在一定时间后会由系统自动唤醒</h2></li>
<li>Thread.sleep()</li>
<li>没有设置Timeout参数的Object.wait() 方法</li>
<li>没有设置Timeout参数的Thread.join() 方法</li>
<li>LockSupport.parkNanos() 方法</li>
<li>LockSupport.parkUntil() 方法</li>
</ul>
<h2 id="5-阻塞-Blocked-等待获取排他锁"><a href="#5-阻塞-Blocked-等待获取排他锁" class="headerlink" title="5. 阻塞(Blocked): 等待获取排他锁"></a>5. 阻塞(Blocked): 等待获取排他锁</h2><ul>
<li>就是在竞争锁的时候，被阻塞了（例如因Lock 或者synchronize 关键字产生的状态）</li>
</ul>
<h2 id="6-终止（terminate）：终止状态"><a href="#6-终止（terminate）：终止状态" class="headerlink" title="6. 终止（terminate）：终止状态"></a>6. 终止（terminate）：终止状态</h2><p><img src="https://img-blog.csdnimg.cn/20200613143919461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjE2Mjk2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="wait-notify-notifyAll"><a href="#wait-notify-notifyAll" class="headerlink" title="wait/notify/notifyAll"></a>wait/notify/notifyAll</h1><p>这几个方法光知道是个啥，但理解的还不够深入，这里做一下总结。</p>
<h2 id="1-wait-notify-notifyAll"><a href="#1-wait-notify-notifyAll" class="headerlink" title="1. wait/notify/notifyAll"></a>1. wait/notify/notifyAll</h2><p>在聊上面这个常见的方法之前，有必要先知道什么是管程。</p>
<p>当我们对临界区进行实现的时候，往往都是通过PV操作来实现的，但让程序员手动去做PV操作，很容易发生死锁。 所以为了方便编程，减少死锁出现的可能，我们希望能有一种数据结构或是软件模块来专门为我们提供对“临界区”的实现，这就是管程了～（但单单就说管程就是对临界区的实现是不准确的，继续往下看）</p>
<p>但仅仅是实现临界区还是不够的，比如，当线程A获取到锁了之后，进入了临界区，这个时候因为一些<font color=red><strong>外部条件X</strong></font>, 而导致无法进行下去，这个时候就需要等待这个外部条件X的发生… 而假设这个外部条件X的发生是需要另一个线程B进入到当前的这个“临界区”中才能触发，而因为线程A已经处于临界区中了，所以线程B需要等待线程A退出临界区才能继续执行。。 于是。。就变成了线程A在等线程B，线程B在等线程A，死锁出现了。。</p>
<p>因此，解决临界区中的线程同步问题，也是管程需要实现的。</p>
<p>一个解决方案就是，在临界区中的线程A一旦发现自己想要的外部条件没有发生，而不能够继续进行下去了的时候，就主动释放掉当前获取的这个临界区的锁，然后让其他线程进入到这个临界区来触发这个“外部条件X”的发生。。  等到这个外部条件X发生了之后，再通知线程A（之前因这个条件而释放掉锁的那个线程）重新去竞争锁，继续执行临界区..     </p>
<p>这个方法流程是不是很熟悉？ 没错，这不就是wait和notify嘛。。</p>
<p>因此，管程的实现主要就是：</p>
<ul>
<li>临界区的实现</li>
<li>monitor 对象及锁的实现</li>
<li>条件变量以及定义在 monitor 对象上的 wait，signal 操作的实现</li>
</ul>
<p>然后就可以了解下<a href="https://www.jianshu.com/p/7f8a873d479c" target="_blank" rel="noopener">Java对管程的实现</a>了。</p>
<h3 id="a-对临界区的实现"><a href="#a-对临界区的实现" class="headerlink" title="a. 对临界区的实现"></a>a. 对临界区的实现</h3><p>Synchronized的同步块,  ReentrantLock在lock和unlock期间的那段代码.. 都是对临界区的实现..</p>
<blockquote>
<p>在Java中，每个对象都有两个池，锁(monitor)池和等待池</p>
</blockquote>
<blockquote>
<p>锁池：假设线程A已经拥有了某个对象(注意:不是类)的锁，而其它的线程想要调用这个对象的某个synchronized方法(或者synchronized块)，由于这些线程在进入对象的synchronized方法之前必须先获得该对象的锁的拥有权，但是该对象的锁目前正被线程A拥有，所以这些线程就进入了该对象的锁池中。</p>
</blockquote>
<blockquote>
<p>等待池：假设一个线程A调用了某个对象的wait()方法，线程A就会释放该对象的锁(因为wait()方法必须出现在synchronized中，这样自然在执行wait()方法之前线程A就已经拥有了该对象的锁)，同时线程A就进入到了该对象的等待池中。如果另外的一个线程调用了相同对象的notifyAll()方法，那么处于该对象的等待池中的线程就会全部进入该对象的锁池中，准备争夺锁的拥有权。如果另外的一个线程调用了相同对象的notify()方法，那么仅仅有一个处于该对象的等待池中的线程(随机)会进入该对象的锁池.</p>
</blockquote>
<h3 id="b-条件变量以及定义在-monitor-对象上的-wait，signal-操作的实现"><a href="#b-条件变量以及定义在-monitor-对象上的-wait，signal-操作的实现" class="headerlink" title="b. 条件变量以及定义在 monitor 对象上的 wait，signal 操作的实现"></a>b. 条件变量以及定义在 monitor 对象上的 wait，signal 操作的实现</h3><p>对于Synchronized，只实现了wait和signal操作…<br>如果想使用更细粒度的条件变量，来控制临界区内线程的同步，那么可以使用ReentrantLock来做.. </p>
<p>ReentrantLock提供了Condition变量，作为条件变量，对应的方法是 condition.await() 和 condition.signal() </p>
<h2 id="锁池和等待池"><a href="#锁池和等待池" class="headerlink" title="锁池和等待池"></a>锁池和等待池</h2><p>在Java中，每个对象都有两个池，锁(monitor)池和等待池</p>
<p>锁池:  假设线程A已经拥有了某个对象(注意:不是类)的锁，而其它的线程想要调用这个对象的某个synchronized方法(或者synchronized块)，由于这些线程在进入对象的synchronized方法之前必须先获得该对象的锁的拥有权，但是该对象的锁目前正被线程A拥有，所以这些线程就进入了该对象的锁池中。</p>
<p>等待池:  假设一个线程A调用了某个对象的wait()方法，线程A就会释放该对象的锁(因为wait()方法必须出现在synchronized中，这样自然在执行wait()方法之前线程A就已经拥有了该对象的锁)，同时线程A就进入到了该对象的等待池中。如果另外的一个线程调用了相同对象的notifyAll()方法，那么处于该对象的等待池中的线程就会全部进入该对象的锁池中，准备争夺锁的拥有权。如果另外的一个线程调用了相同对象的notify()方法，那么仅仅有一个处于该对象的等待池中的线程(随机)会进入该对象的锁池。</p>
<h2 id="wait原理："><a href="#wait原理：" class="headerlink" title="wait原理："></a>wait原理：</h2><p>如果线程调用了对象的 wait()方法，那么线程便会处于该对象的等待池中，等待池中的线程不会去竞争该对象的锁。<br>当有线程调用了对象的 notifyAll()方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait 线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。<br>优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用 wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized 代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。</p>
<p>必读：<br><a href="https://blog.csdn.net/u014561933/article/details/58639411?utm_source=blogxgwz4" target="_blank" rel="noopener">sleep()和wait()方法与对象锁、锁池、等待池</a></p>
<p><a href="https://blog.csdn.net/qq_15037231/article/details/103440060" target="_blank" rel="noopener">Thread.yield()和Thread.sleep(0)</a></p>
<p><a href="https://blog.csdn.net/weixin_42621338/article/details/82899060?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">推荐阅读</a></p>
<h2 id="wait和park的区别"><a href="#wait和park的区别" class="headerlink" title="wait和park的区别"></a>wait和park的区别</h2><blockquote>
<p>我们在编程的时候必须能保证wait方法比notify方法先执行。如果notify方法比wait方法晚执行的话，就会导致因wait方法进入休眠的线程接收不到唤醒通知的问题。</p>
</blockquote>
<blockquote>
<p>而park、unpark则不会有这个问题，我们可以先调用unpark方法释放一个许可证，这样后面线程调用park方法时，发现已经许可证了，就可以直接获取许可证而不用进入休眠状态了。</p>
</blockquote>
<blockquote>
<p>LockSupport.park() 的实现原理是通过二元信号量做的阻塞，要注意的是，这个信号量最多只能加到1。我们也可以理解成获取释放许可证的场景。unpark()方法会释放一个许可证，park()方法则是获取许可证，如果当前没有许可证，则进入休眠状态，知道许可证被释放了才被唤醒。无论执行多少次unpark()方法，也最多只会有一个许可证。</p>
</blockquote>
<p><font color=red>另外，和wait方法不同，执行park进入休眠后并不会释放持有的锁。<br>并且，调用wait方法需要已经获取到锁，而park则不需要 </font></p>
<p><strong>wait的局限，以及Condition的出场</strong></p>
<p>使用wait的一个前提就是在sync的同步块里，而这又导致了在同步块里的条件变量只有一个，尽管可以通过共享变量的方式来实现“需要多个条件变量的场合”，但这样不仅实现的复杂度高，而且也不是很高效。因此，为了让在同步块中使用更多样的条件变量（即对某一资源或者某一个事件的等待），ReentrantLock就提供了Condition这一个神器，一个Lock可以new出多个Condition，即多个等待队列。</p>
<p>所以，await/signal, 可以看成强化版的 wait/notify</p>
<p><a href="https://blog.csdn.net/boguesfei/article/details/81736489" target="_blank" rel="noopener">参考链接</a></p>
<h1 id="Q-amp-A："><a href="#Q-amp-A：" class="headerlink" title="Q&amp;A："></a>Q&amp;A：</h1><h2 id="1-信号量和条件变量的区别是什么？"><a href="#1-信号量和条件变量的区别是什么？" class="headerlink" title="1. 信号量和条件变量的区别是什么？"></a>1. 信号量和条件变量的区别是什么？</h2><ul>
<li>条件变量可以通过<code>signal()</code>唤醒队首阻塞线程，使用<code>signalAll()</code>来唤醒所有阻塞线程；而信号量只能通过<code>release()</code>唤醒队首阻塞线程.</li>
<li>信号量可以初始化初始的值，但条件变量不可以，但条件变量+共享变量可以实现初始值大于0的信号量的功能。（个人理解成，条件变量的功能类似一个初始值为0的信号量 ）。</li>
</ul>
]]></content>
      <categories>
        <category>Java并发</category>
      </categories>
      <tags>
        <tag>Java并发基础</tag>
      </tags>
  </entry>
</search>
